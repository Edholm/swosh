name: Build, test, and deploy

on:
  push:
    branches:
      - master

jobs:
  build-gradle:
    name: Gradle
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up JDK 15
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 15

      - name: Cache Gradle cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload jar-file
        uses: actions/upload-artifact@v1
        with:
          name: libs
          path: build/libs/swosh.jar
  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: build-gradle
    env:
      REPO: edholm/swosh
    steps:
      - uses: actions/checkout@v1
      - name: Download jar-file
        uses: actions/download-artifact@v1
        with:
          name: libs
          path: build/libs/

        # This enables experimental features
      - name: Setup Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Login to Docker
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push arm64 container
        run: |
          VERSION=$(git describe HEAD)
          TAG="${REPO}:${VERSION}-arm64"
          echo Starting build of "$TAG"
          docker build --pull=true --platform arm64 --squash --tag="${TAG}" -f Dockerfile build/libs
          docker push "${TAG}"
        shell: bash

      - name: Build and push amd64 container
        run: |
          VERSION=$(git describe HEAD)
          TAG="${REPO}:${VERSION}-amd64"
          echo Starting build of "$TAG"
          docker build --pull=true --platform amd64 --squash --tag="${TAG}" -f Dockerfile build/libs
          docker push "${TAG}"
        shell: bash

      - name: Create manifest
        run: |
          VERSION=$(git describe HEAD)
          TAG="${REPO}:${VERSION}"
          LATEST="${REPO}:latest"
          docker manifest create --amend "${TAG}" "${TAG}-arm64" "${TAG}-amd64"
          docker manifest create --amend "${LATEST}" "${TAG}-arm64" "${TAG}-amd64"

          docker manifest push "${TAG}"
          docker manifest push "${LATEST}"
        shell: bash
#  deploy:
#    name: Deploy to staging
#    runs-on: ubuntu-latest
#    needs: build-docker
#    steps:
#      - uses: actions/checkout@v1
#      - name: Setup kubectl
#        env:
#          K8S_CA: ${{ secrets.K8S_CA }}
#          K8S_CLIENT_CERT: ${{ secrets.K8S_CLIENT_CERT }}
#          K8S_CLIENT_KEY: ${{ secrets.K8S_CLIENT_KEY }}
#          K8S_SERVER: ${{ secrets.K8S_SERVER }}
#        run: |
#          echo "${K8S_CA}" > ca.crt
#          echo "${K8S_CLIENT_CERT}" > client.crt
#          echo "${K8S_CLIENT_KEY}" > client.key
#          kubectl config set-cluster k8s --server "${K8S_SERVER}" --certificate-authority ca.crt --embed-certs=true
#          kubectl config set-credentials swosh-editor --client-certificate client.crt --client-key client.key --embed-certs=true
#          kubectl config set-context swosh-context --cluster k8s --namespace swosh --user swosh-editor
#          kubectl config use-context swosh-context
#        shell: bash
#      - name: Update version to deploy
#        run: |
#          VERSION=$(git describe HEAD)
#          sed -i "s|<VERSION>|${VERSION}|g" kubernetes/staging.yml
#      - name: Deploy to staging
#        run: |
#          kubectl apply -f kubernetes/common.yml
#          kubectl apply -f kubernetes/staging.yml
